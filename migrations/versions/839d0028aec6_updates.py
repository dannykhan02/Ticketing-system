"""updates

Revision ID: 839d0028aec6
Revises: 
Create Date: 2025-07-01 22:06:51.833614

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '839d0028aec6'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('category',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('currencies',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('code', sa.Enum('USD', 'EUR', 'GBP', 'KES', 'UGX', 'TZS', 'NGN', 'GHS', 'ZAR', 'JPY', 'CAD', 'AUD', name='currencycode'), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('symbol', sa.String(length=10), nullable=False),
    sa.Column('is_base_currency', sa.Boolean(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code')
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password', sa.String(length=255), nullable=True),
    sa.Column('full_name', sa.String(length=100), nullable=True),
    sa.Column('role', sa.Enum('ADMIN', 'ORGANIZER', 'ATTENDEE', 'SECURITY', name='userrole'), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('phone_number', sa.String(length=255), nullable=True),
    sa.Column('google_id', sa.String(length=255), nullable=True),
    sa.Column('is_oauth', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('google_id')
    )
    op.create_table('exchange_rates',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('from_currency_id', sa.Integer(), nullable=False),
    sa.Column('to_currency_id', sa.Integer(), nullable=False),
    sa.Column('rate', sa.Numeric(precision=15, scale=6), nullable=False),
    sa.Column('effective_date', sa.DateTime(), nullable=False),
    sa.Column('source', sa.String(length=100), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['from_currency_id'], ['currencies.id'], ),
    sa.ForeignKeyConstraint(['to_currency_id'], ['currencies.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('from_currency_id', 'to_currency_id', 'is_active', name='uix_active_exchange_rate')
    )
    op.create_table('organizer',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('company_name', sa.String(length=255), nullable=False),
    sa.Column('company_logo', sa.String(length=255), nullable=True),
    sa.Column('company_description', sa.Text(), nullable=True),
    sa.Column('website', sa.String(length=255), nullable=True),
    sa.Column('social_media_links', sa.JSON(), nullable=True),
    sa.Column('business_registration_number', sa.String(length=255), nullable=True),
    sa.Column('tax_id', sa.String(length=255), nullable=True),
    sa.Column('address', sa.Text(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_table('event',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('start_time', sa.Time(), nullable=False),
    sa.Column('end_time', sa.Time(), nullable=True),
    sa.Column('location', sa.Text(), nullable=False),
    sa.Column('image', sa.String(length=255), nullable=True),
    sa.Column('organizer_id', sa.Integer(), nullable=False),
    sa.Column('featured', sa.Boolean(), nullable=False),
    sa.Column('category_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['category.id'], ),
    sa.ForeignKeyConstraint(['organizer_id'], ['organizer.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('event', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_event_date'), ['date'], unique=False)

    op.create_table('transaction',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('amount_paid', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('currency_id', sa.Integer(), nullable=False),
    sa.Column('payment_status', sa.Enum('PENDING', 'COMPLETED', 'PAID', 'FAILED', 'REFUNDED', 'CANCELED', 'CHARGEBACK', 'ON_HOLD', name='paymentstatus'), nullable=False),
    sa.Column('payment_reference', sa.Text(), nullable=False),
    sa.Column('payment_method', sa.Enum('MPESA', 'PAYSTACK', name='paymentmethod'), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('organizer_id', sa.Integer(), nullable=True),
    sa.Column('merchant_request_id', sa.String(length=255), nullable=True),
    sa.Column('mpesa_receipt_number', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['currency_id'], ['currencies.id'], ),
    sa.ForeignKeyConstraint(['organizer_id'], ['organizer.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('merchant_request_id')
    )
    op.create_table('event_likes',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('event_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['event_id'], ['event.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'event_id')
    )
    op.create_table('ticket_type',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('type_name', sa.Enum('REGULAR', 'VIP', 'STUDENT', 'GROUP_OF_5', 'COUPLES', 'EARLY_BIRD', 'VVIP', 'GIVEAWAY', name='tickettypeenum'), nullable=False),
    sa.Column('price', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('currency_id', sa.Integer(), nullable=True),
    sa.Column('event_id', sa.Integer(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['currency_id'], ['currencies.id'], ),
    sa.ForeignKeyConstraint(['event_id'], ['event.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('ticket_type', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_ticket_type_event_id'), ['event_id'], unique=False)

    op.create_table('reports',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('organizer_id', sa.Integer(), nullable=False),
    sa.Column('event_id', sa.Integer(), nullable=False),
    sa.Column('ticket_type_id', sa.Integer(), nullable=True),
    sa.Column('base_currency_id', sa.Integer(), nullable=False),
    sa.Column('converted_currency_id', sa.Integer(), nullable=True),
    sa.Column('total_revenue', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('converted_revenue', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('report_scope', sa.String(length=50), nullable=False),
    sa.Column('total_tickets_sold', sa.Integer(), nullable=False),
    sa.Column('number_of_attendees', sa.Integer(), nullable=True),
    sa.Column('report_data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('report_date', sa.Date(), nullable=True),
    sa.ForeignKeyConstraint(['base_currency_id'], ['currencies.id'], ),
    sa.ForeignKeyConstraint(['converted_currency_id'], ['currencies.id'], ),
    sa.ForeignKeyConstraint(['event_id'], ['event.id'], ),
    sa.ForeignKeyConstraint(['organizer_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['ticket_type_id'], ['ticket_type.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('reports', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_reports_event_id'), ['event_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_reports_organizer_id'), ['organizer_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_reports_ticket_type_id'), ['ticket_type_id'], unique=False)

    op.create_table('ticket',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('phone_number', sa.String(length=255), nullable=True),
    sa.Column('email', sa.Text(), nullable=True),
    sa.Column('ticket_type_id', sa.Integer(), nullable=False),
    sa.Column('event_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('organizer_id', sa.Integer(), nullable=True),
    sa.Column('transaction_id', sa.Integer(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('qr_code', sa.String(length=255), nullable=False),
    sa.Column('scanned', sa.Boolean(), nullable=True),
    sa.Column('purchase_date', sa.DateTime(), nullable=False),
    sa.Column('merchant_request_id', sa.String(length=255), nullable=True),
    sa.Column('payment_status', sa.Enum('PENDING', 'COMPLETED', 'PAID', 'FAILED', 'REFUNDED', 'CANCELED', 'CHARGEBACK', 'ON_HOLD', name='paymentstatus'), nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['event.id'], ),
    sa.ForeignKeyConstraint(['organizer_id'], ['organizer.id'], ),
    sa.ForeignKeyConstraint(['ticket_type_id'], ['ticket_type.id'], ),
    sa.ForeignKeyConstraint(['transaction_id'], ['transaction.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('qr_code')
    )
    op.create_table('scan',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('ticket_id', sa.Integer(), nullable=False),
    sa.Column('scanned_at', sa.DateTime(), nullable=False),
    sa.Column('scanned_by', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['scanned_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['ticket_id'], ['ticket.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('transaction_ticket',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('transaction_id', sa.Integer(), nullable=False),
    sa.Column('ticket_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['ticket_id'], ['ticket.id'], ),
    sa.ForeignKeyConstraint(['transaction_id'], ['transaction.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('transaction_id', 'ticket_id', name='uix_transaction_ticket')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('transaction_ticket')
    op.drop_table('scan')
    op.drop_table('ticket')
    with op.batch_alter_table('reports', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_reports_ticket_type_id'))
        batch_op.drop_index(batch_op.f('ix_reports_organizer_id'))
        batch_op.drop_index(batch_op.f('ix_reports_event_id'))

    op.drop_table('reports')
    with op.batch_alter_table('ticket_type', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_ticket_type_event_id'))

    op.drop_table('ticket_type')
    op.drop_table('event_likes')
    op.drop_table('transaction')
    with op.batch_alter_table('event', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_event_date'))

    op.drop_table('event')
    op.drop_table('organizer')
    op.drop_table('exchange_rates')
    op.drop_table('user')
    op.drop_table('currencies')
    op.drop_table('category')
    # ### end Alembic commands ###
